Index: run_tests.py
===================================================================
RCS file: /cvsroot/mozilla/testing/performance/talos/run_tests.py,v
retrieving revision 1.51
diff -u -8 -p -r1.51 run_tests.py
--- run_tests.py	10 Sep 2009 16:10:53 -0000	1.51
+++ run_tests.py	16 Sep 2009 21:06:23 -0000
@@ -93,27 +93,27 @@ def process_Request(post):
     utils.debug("process_Request line: " + line.replace("RETURN\t", ""))
   if not links:
     raise talosError("send failed, graph server says:\n" + post)
   return links
 
 def send_to_csv(csv_dir, results):
   import csv
   for res in results:
-    browser_dump, counter_dump = results[res]
+    browser_dump, counter_dump, print_format = results[res]
     writer = csv.writer(open(os.path.join(csv_dir, res + '.csv'), "wb"))
-    if res in ('ts', 'twinopen', 'ts_places_generated_max', 'ts_places_generated_min', 'ts_places_generated_med'):
+    if print_format == 'tsformat':
       i = 0
       writer.writerow(['i', 'val'])
       for val in browser_dump:
         val_list = val.split('|')
         for v in val_list:
           writer.writerow([i, v])
           i += 1
-    else:
+    elif print_format == 'tpformat':
       writer.writerow(['i', 'page', 'median', 'mean', 'min' , 'max', 'runs'])
       for bd in browser_dump:
         bd.rstrip('\n')
         page_results = bd.splitlines()
         i = 0
         for mypage in page_results:
           r = mypage.split(';')
           #skip this line if it isn't the correct format
@@ -121,16 +121,18 @@ def send_to_csv(csv_dir, results):
               continue
           r[1] = r[1].rstrip('/')
           if r[1].find('/') > -1 :
              page = r[1].split('/')[1]
           else:
              page = r[1]
           writer.writerow([i, page, r[2], r[3], r[4], r[5], '|'.join(r[6:])])
           i += 1
+    else:
+      raise talosError("Unknown print format in send_to_csv")
     for cd in counter_dump:
       for count_type in cd:
         writer = csv.writer(open(os.path.join(csv_dir, res + '_' + count_type + '.csv'), "wb"))
         writer.writerow(['i', 'value'])
         i = 0
         for val in cd[count_type]:
           writer.writerow([i, val])
           i += 1
@@ -170,43 +172,45 @@ def construct_results (machine, testname
 def send_to_graph(results_server, results_link, machine, date, browser_config, results):
   links = ''
   result_strings = []
 
   #construct all the strings of data, one string per test and one string  per counter
   for testname in results:
     vals = []
     fullname = testname
-    browser_dump, counter_dump = results[testname]
+    browser_dump, counter_dump, print_format = results[testname]
     utils.debug("Working with test: " + testname)
     utils.debug("Sending results: " + " ".join(browser_dump))
     utils.stamped_msg("Generating results file: " + testname, "Started")
-    if testname in ('ts', 'twinopen', 'ts_places_generated_max', 'ts_places_generated_min', 'ts_places_generated_med'):
+    if print_format == 'tsformat':
       #non-tpformat results
       for bd in browser_dump:
         vals.extend([[x, 'NULL'] for x in bd.split('|')])
-    else:
+    elif print_format == 'tpformat':
       #tpformat results
       fullname += browser_config['test_name_extension']
       for bd in browser_dump:
         bd.rstrip('\n')
         page_results = bd.splitlines()
         for line in page_results:
           val, page = process_tpformat(line)
           if val > -1 :
             vals.append([val, page])
+    else:
+      raise talosError("Unknown print format in send_to_graph")
     result_strings.append(construct_results(machine, fullname, browser_config['branch_name'], browser_config['sourcestamp'], browser_config['buildid'], date, vals))
     utils.stamped_msg("Generating results file: " + testname, "Stopped")
     #counters collected for this test
     for cd in counter_dump:
       for count_type in cd:
         vals = [[x, 'NULL'] for x in cd[count_type]]
         counterName = testname + '_' + shortName(count_type)
         utils.stamped_msg("Generating results file: " + counterName, "Started")
-        if testname not in ('ts', 'twinopen', 'ts_places_generated_max', 'ts_places_generated_min', 'ts_places_generated_med'):
+        if print_format == "tpformat":
           counterName += browser_config['test_name_extension']
         utils.stamped_msg("Generating results file: " + counterName, "Started")
         result_strings.append(construct_results(machine, counterName, browser_config['branch_name'], browser_config['sourcestamp'], browser_config['buildid'], date, vals))
         utils.stamped_msg("Generating results file: " + counterName, "Stopped")
     
   #send all the strings along to the graph server
   for data_string in result_strings:
     RETRIES = 5
@@ -370,19 +374,19 @@ def test_file(filename):
   browser_config = browserInfo(browser_config)
 
   utils.startTimer()
   utils.stamped_msg(title, "Started")
   for test in tests:
     testname = test['name']
     utils.stamped_msg("Running test " + testname, "Started")
     try:
-      browser_dump, counter_dump = ttest.runTest(browser_config, test)
+      browser_dump, counter_dump, print_format = ttest.runTest(browser_config, test)
       utils.debug("Received test results: " + " ".join(browser_dump))
-      results[testname] = [browser_dump, counter_dump]
+      results[testname] = [browser_dump, counter_dump, print_format]
       # If we're doing CSV, write this test immediately (bug 419367)
       if csv_dir != '':
         send_to_csv(csv_dir, {testname : results[testname]})
     except talosError, e:
       utils.stamped_msg("Failed " + testname, "Stopped")
       print 'FAIL: Busted: ' + testname
       print 'FAIL: ' + e.msg.replace('\n','\nRETURN:')
     utils.stamped_msg("Completed test " + testname, "Stopped")
Index: ttest.py
===================================================================
RCS file: /cvsroot/mozilla/testing/performance/talos/ttest.py,v
retrieving revision 1.31
diff -u -8 -p -r1.31 ttest.py
--- ttest.py	20 Aug 2009 12:48:40 -0000	1.31
+++ ttest.py	16 Sep 2009 21:06:23 -0000
@@ -140,16 +140,17 @@ def runTest(browser_config, test_config)
   
   """
  
   utils.debug("operating with platform_type : " + platform_type)
   counters = test_config[platform_type + 'counters']
   resolution = test_config['resolution']
   all_browser_results = []
   all_counter_results = []
+  format = ""
   utils.setEnvironmentVars(browser_config['env'])
   utils.setEnvironmentVars({'MOZ_CRASHREPORTER_NO_REPORT': '1'})
 
   if browser_config['symbols_path']:
       utils.setEnvironmentVars({'MOZ_CRASHREPORTER': '1'})
   else:
       utils.setEnvironmentVars({'MOZ_CRASHREPORTER_DISABLE': '1'})
 
@@ -239,24 +240,26 @@ def runTest(browser_config, test_config)
           utils.noisy(results_raw)
   
           match = RESULTS_REGEX.search(results_raw)
           if match:
             browser_results += match.group(1)
             startTime = int(match.group(2))
             endTime = int(match.group(3))
             utils.debug("Matched basic results: " + browser_results)
+            format = "tsformat"
             break
           #TODO: this a stop gap until all of the tests start outputting the same format
           match = RESULTS_TP_REGEX.search(results_raw)
           if match:
             browser_results += match.group(1)
             startTime = int(match.group(2))
             endTime = int(match.group(3))
             utils.debug("Matched tp results: " + browser_results)
+            format = "tpformat"
             break
           match = RESULTS_REGEX_FAIL.search(results_raw)
           if match:
             browser_results += match.group(1)
             utils.debug("Matched fail results: " + browser_results)
             raise talosError(match.group(1))
           raise talosError("unrecognized output format")
   
@@ -281,17 +284,17 @@ def runTest(browser_config, test_config)
       all_counter_results.append(counter_results)
      
     ffprocess.cleanupProcesses(browser_config['process'], browser_config['browser_wait']) 
     cleanupProfile(temp_dir)
 
     utils.restoreEnvironmentVars()
     if test_config['shutdown']:
       all_counter_results.append({'shutdown' : shutdown})      
-    return (all_browser_results, all_counter_results)
+    return (all_browser_results, all_counter_results, format)
   except:
     try:
       if 'cm' in vars():
         cm.stopMonitor()
 
       if os.path.isfile(browser_config['browser_log']):
         results_file = open(browser_config['browser_log'], "r")
         results_raw = results_file.read()
