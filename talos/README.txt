<<<<<<< README.txt
Follow directions at:
http://wiki.mozilla.org/StandaloneTalos#How_to_set_up_Talos_for_testing_at_home
=======
PREREQUISITES:
You'll need to download some software onto your machine before running
these performance tests:

  * Python 2.4
    The scripts all run from Python 2.4.  
    http://www.python.org/ftp/python/2.4/python-2.4.msi

  * Python Win32 Extensions (for windows only)
    These extensions provide some support for process management and
    performance monitoring.
    http://prdownloads.sourceforge.net/pywin32/pywin32-208.win32-py2.4.exe?download
     
  * Apache HTTP Server
    Found at http://httpd.apache.org/
    The page cycler works on a local Apache server.  After installing Apache simply place
    the page_load_test/ directory into htdocs/ directory of Apache (found on most systems
    at c:\Program Files\Apache Software Foundation\Apache2.2\htdocs)
    
  * PyYAML YAML Parser
    You'll need to download and install PyYAML from http://pyyaml.org/wiki/PyYAML

  * pageloader extension
    This is the component that actually cycles the test pages and collects the page load times.
    It's located in mozilla/layout/tools/pageloader, it can also be generated by
    mozilla/tools/buildbot-configs/testing/talos/perfmaster/scripts/generate-tpcomponent.py,
    run that script and place the contents of the chrome & components directories into the 
    matching directories of your browser

  1. Make sure the prerequisites, above, are installed.
  2. Edit sample.config to reflect your local settings for application path, etc.
  3. Provide a pages/ directory
     The page_load_test/ relies upon having a pages directory that includes the web pages
     to be cycled through.  Each directory in pages/ should be a given web page.  
     The page_load_test/manifest.js file needs to be edited to reflect the list of index pages of the web pages 
     that are to be tested - it is currently full of a sample list.
     If you do not have a pages directory comment out the tp & tp_js tests in the sample.config

  4. Run "python run_tests.py" with the name of your config file as an argument. 
     There are also available '--debug' and '--noisy' arguments

>>>>>>> 1.5
