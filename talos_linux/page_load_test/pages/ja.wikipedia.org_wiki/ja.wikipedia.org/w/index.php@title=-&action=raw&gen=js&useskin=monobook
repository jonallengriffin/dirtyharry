/* generated javascript */
var skin = 'monobook';
var stylepath = '/skins-1.5';

/* MediaWiki:Common.js */
//<source lang="javascript">
/* ここに書いたスクリプトは全ての外装に反映されます */
// Improvement of the search page v4
// Auteur : Marc Mongenet & Suisui
// Source licenced GFDL & GPL

function SpecialSearchEnhanced() 
{

  function SearchForm(engine_name, engine_url, logo_url, search_action_url, 
                      search_field_name, add_search_field, field_array)
  {

    var span= document.createElement("span");
    span.style.marginRight = "1em";


    var form = document.createElement("form");
    form.method = "get";
    form.action = search_action_url;
    form.style.display = "inline";
    span.appendChild(form);

    var input = document.createElement("input");
    input.type = "hidden";
    input.name = search_field_name;
    form.appendChild(input);

    for( var i in field_array){
      var fld = document.createElement("input");
      fld.type = "hidden";
      fld.name = i;
      fld.value = field_array[i];
      form.appendChild(fld);
    }


    var submit = document.createElement("input");
    submit.type = "submit";
    submit.value = "検索";
    form.appendChild(submit);

    form.onsubmit = function() {
      if(add_search_field == ""){
        input.value = document.getElementById("lsearchbox").value;
      }else{
        input.value = document.getElementById("lsearchbox").value+add_search_field;
      }
    }

    var a = document.createElement("a");
    a.href = engine_url;
    span.appendChild(a);

    var img = document.createElement("img");
    img.src = logo_url;
    img.alt = engine_name;
    img.style.borderWidth = "0";
    img.style.padding = "5px";
    img.style.width = "135px";
    img.style.height = "35px";
    a.appendChild(img);

    return span;
  }
  if (typeof SpecialSearchEnhancedDisabled != 'undefined') return;
  if (wgCanonicalNamespace != "Special" || wgCanonicalSpecialPageName != "Search") return;

  if(skin == "monobook" || skin == "cologneblue" || skin == "simple"){var mainNode = document.getElementsByTagName("form");}
  if (!mainNode) return;
  mainNode = mainNode[0];
  mainNode.appendChild(document.createElement("center"));
  mainNode = mainNode.lastChild;

  var searchValue = document.getElementById("lsearchbox").value;

  var div= document.createElement("div");
  div.style.width = "100%";
//  ul.style.list-style-type = "none";
  mainNode.appendChild(div);

  var engine;
  var goodsearcho = new Object();
  goodsearcho["charityid"] = "812661";
  engine = SearchForm("GoodSearch", "http://www.goodsearch.com/", "http://www.goodsearch.com/_gfx/title_smaller.gif",
                      "http://www.goodsearch.com/Search.aspx",
                      "Keywords", "+site:ja.wikipedia.org", goodsearcho);
  div.appendChild(engine);

  var googleo = new Object();
  googleo["as_sitesearch"] = "ja.wikipedia.org";
  engine = SearchForm("Google", "http://www.google.co.jp/", "http://www.google.co.jp/logos/powered_by_google_135x35.gif", 
                      "http://www.google.co.jp/search",
                      "q", "", googleo);
  div.appendChild(engine);

  var yahoojo = new Object();
  yahoojo["vs"] = "ja.wikipedia.org";
  yahoojo["ei"] = "UTF-8";
  engine = SearchForm("Yahoo!", "http://www.yahoo.co.jp/", "http://img.yahoo.co.jp/images/yahoojp.gif",  
                     "http://search.yahoo.co.jp/search",
                     "p", "", yahoojo);
  div.appendChild(engine);

  var msliveo = new Object();
  msliveo["q1"] = "site:ja.wikipedia.org"
  engine = SearchForm("Live", "http://search.live.com/", "http://ads.msn.com/ads/pronws/ideas/en/us/EN_Logo_Right_Live.gif",  
                      "http://search.live.com/results.aspx",
                      "q", "", msliveo);
  div.appendChild(engine);

  var gooo = new Object();
  gooo["Domain"] = "ja.wikipedia.org";
  gooo["IE"] = "UTF-8";
  gooo["DS"] = "IN";
  engine = SearchForm("goo", "http://www.goo.ne.jp/", "http://help.goo.ne.jp/img/link/pb_goo.gif",  
                     "http://search.goo.ne.jp/web.jsp",
                     "MT", "", gooo);
  div.appendChild(engine);

  var altavistao = new Object();
  altavistao["aqmode"] = "s";
  altavistao["rc"] = "dmn";
  altavistao["swd"] = "ja.wikipedia.org"
  engine = SearchForm("altavista", "http://www.altavista.com/", "http://us.i1.yimg.com/us.yimg.com/i/us/av/logo_srp.gif",
                      "http://www.altavista.com/web/results",
                      "aqa", "", altavistao);
  div.appendChild(engine);
}

addOnloadHook(SpecialSearchEnhanced);

 /** "Technical restrictions" title fix *****************************************
  *
  *  Description:
  *  Maintainers: [[en:User:Interiot]], [[en:User:Mets501]]
  */
 
 // For pages that have something like Template:Lowercase, replace the title, but only if it is cut-and-pasteable as a valid wikilink.
 //	(for instance [[iPod]]'s title is updated.  <nowiki>But [[C#]] is not an equivalent wikilink, so [[C Sharp]] doesn't have its main title changed)</nowiki>
 //
 // The function looks for a banner like this: <nowiki>
 // <div id="RealTitleBanner">    <!-- div that gets hidden -->
 //   <span id="RealTitle">title</span>
 // </div>
 // </nowiki>An element with id=DisableRealTitle disables the function.
 var disableRealTitle = 0;		// users can disable this by making this true from their monobook.js
 if (wgIsArticle) {			// don't display the RealTitle when editing, since it is apparently inconsistent (doesn't show when editing sections, doesn't show when not previewing)
     addOnloadHook(function() {
 	try {
 		var realTitleBanner = document.getElementById("RealTitleBanner");
 		if (realTitleBanner && !document.getElementById("DisableRealTitle") && !disableRealTitle) {
 			var realTitle = document.getElementById("RealTitle");
 			if (realTitle) {
 				var realTitleHTML = realTitle.innerHTML;
 				realTitleText = pickUpText(realTitle);
 
 				var isPasteable = 0;
 				//var containsHTML = /</.test(realTitleHTML);	// contains ANY HTML
 				var containsTooMuchHTML = /</.test( realTitleHTML.replace(/<\/?(sub|sup|small|big)>/gi, "") ); // contains HTML that will be ignored when cut-n-pasted as a wikilink
 				// calculate whether the title is pasteable
 				var verifyTitle = realTitleText.replace(/^ +/, "");		// trim left spaces
 				verifyTitle = verifyTitle.charAt(0).toUpperCase() + verifyTitle.substring(1, verifyTitle.length);	// uppercase first character
 
 				// if the namespace prefix is there, remove it on our verification copy.  If it isn't there, add it to the original realValue copy.
 				if (wgNamespaceNumber != 0) {
 					if (wgCanonicalNamespace == verifyTitle.substr(0, wgCanonicalNamespace.length).replace(/ /g, "_") && verifyTitle.charAt(wgCanonicalNamespace.length) == ":") {
 						verifyTitle = verifyTitle.substr(wgCanonicalNamespace.length + 1);
 					} else {
 						realTitleText = wgCanonicalNamespace.replace(/_/g, " ") + ":" + realTitleText;
 						realTitleHTML = wgCanonicalNamespace.replace(/_/g, " ") + ":" + realTitleHTML;
 					}
 				}
 
 				// verify whether wgTitle matches
 				verifyTitle = verifyTitle.replace(/^ +/, "").replace(/ +$/, "");		// trim left and right spaces
 				verifyTitle = verifyTitle.replace(/_/g, " ");		// underscores to spaces
 				verifyTitle = verifyTitle.charAt(0).toUpperCase() + verifyTitle.substring(1, verifyTitle.length);	// uppercase first character
 				isPasteable = (verifyTitle == wgTitle);
 
 				var h1 = document.getElementsByTagName("h1")[0];
 				if (h1 && isPasteable) {
 					h1.innerHTML = containsTooMuchHTML ? realTitleText : realTitleHTML;
 					if (!containsTooMuchHTML)
 						realTitleBanner.style.display = "none";
 				}
 				document.title = realTitleText + " - Wikipedia";
 			}
 		}
 	} catch (e) {
 		/* Something went wrong. */
 	}
     });
 }
 
 
 // similar to innerHTML, but only returns the text portions of the insides, excludes HTML
 function pickUpText(aParentElement) {
   var str = "";
 
   function pickUpTextInternal(aElement) {
     var child = aElement.firstChild;
     while (child) {
       if (child.nodeType == 1)		// ELEMENT_NODE 
         pickUpTextInternal(child);
       else if (child.nodeType == 3)	// TEXT_NODE
         str += child.nodeValue;
 
       child = child.nextSibling;
     }
   }
 
   pickUpTextInternal(aParentElement);
 
   return str;
 }

 /* Test if an element has a certain class **************************************
  *
  * Description: Uses regular expressions and caching for better performance.
  * Maintainers: [[:en:User:Mike Dillon]], [[:en:User:R. Koot]], [[:en:User:SG]]
  */
 
 var hasClass = (function () {
     var reCache = {};
     return function (element, className) {
         return (reCache[className] ? reCache[className] : (reCache[className] = new RegExp("(?:\\s|^)" + className + "(?:\\s|$)"))).test(element.className);
     };
 })();

 /** Collapsible tables *********************************************************
  *
  *  Description: Allows tables to be collapsed, showing only the header. See
  *               [[Wikipedia:NavFrame]].
  *  Maintainers: [[:en:User:R. Koot]]
  */
 
 var autoCollapse = 2;
 var collapseCaption = "隠す";
 var expandCaption = "表示";
 
 function collapseTable( tableIndex )
 {
     var Button = document.getElementById( "collapseButton" + tableIndex );
     var Table = document.getElementById( "collapsibleTable" + tableIndex );
 
     if ( !Table || !Button ) {
         return false;
     }
 
     var Rows = Table.getElementsByTagName( "tr" ); 
 
     if ( Button.firstChild.data == collapseCaption ) {
         for ( var i = 1; i < Rows.length; i++ ) {
             Rows[i].style.display = "none";
         }
         Button.firstChild.data = expandCaption;
     } else {
         for ( var i = 1; i < Rows.length; i++ ) {
             Rows[i].style.display = Rows[0].style.display;
         }
         Button.firstChild.data = collapseCaption;
     }
 }
 
 function createCollapseButtons()
 {
     var tableIndex = 0;
     var NavigationBoxes = new Object();
     var Tables = document.getElementsByTagName( "table" );
 
     for ( var i = 0; i < Tables.length; i++ ) {
         if ( hasClass( Tables[i], "collapsible" ) ) {
             NavigationBoxes[ tableIndex ] = Tables[i];
             Tables[i].setAttribute( "id", "collapsibleTable" + tableIndex );
 
             var Button     = document.createElement( "span" );
             var ButtonLink = document.createElement( "a" );
             var ButtonText = document.createTextNode( collapseCaption );
 
             Button.style.styleFloat = "right";
             Button.style.cssFloat = "right";
             Button.style.fontWeight = "normal";
             Button.style.textAlign = "right";
             Button.style.width = "6em";
 
             ButtonLink.setAttribute( "id", "collapseButton" + tableIndex );
             ButtonLink.setAttribute( "href", "javascript:collapseTable(" + tableIndex + ");" );
             ButtonLink.appendChild( ButtonText );
 
             Button.appendChild( document.createTextNode( "[" ) );
             Button.appendChild( ButtonLink );
             Button.appendChild( document.createTextNode( "]" ) );
 
             var Header = Tables[i].getElementsByTagName( "tr" )[0].getElementsByTagName( "th" )[0];
             /* only add button and increment count if there is a header row to work with */
             if (Header) {
                 Header.insertBefore( Button, Header.childNodes[0] );
                 tableIndex++;
             }
         }
     }
 
     for ( var i = 0;  i < tableIndex; i++ ) {
         if ( hasClass( NavigationBoxes[i], "collapsed" ) || ( tableIndex >= autoCollapse && hasClass( NavigationBoxes[i], "autocollapse" ) ) ) {
             collapseTable( i );
         }
     }
 }
 
 addOnloadHook( createCollapseButtons );

 /** Dynamic Navigation Bars (experimental) *************************************
  *
  *  Description: See [[Wikipedia:NavFrame]].
  *  Maintainers: UNMAINTAINED
  */
 
  // set up the words in your language
  var NavigationBarHide = '[' + collapseCaption + ']';
  var NavigationBarShow = '[' + expandCaption + ']';
  
  // set up max count of Navigation Bars on page,
  // if there are more, all will be hidden
  var NavigationBarShowDefault = 0; // all bars will be hidden
  // NavigationBarShowDefault = 1; // on pages with more than 1 bar all bars will be hidden
  //var NavigationBarShowDefault = autoCollapse;
  
  
  // shows and hides content and picture (if available) of navigation bars
  // Parameters:
  //     indexNavigationBar: the index of navigation bar to be toggled
  function toggleNavigationBar(indexNavigationBar)
  {
     var NavToggle = document.getElementById("NavToggle" + indexNavigationBar);
     var NavFrame = document.getElementById("NavFrame" + indexNavigationBar);
  
     if (!NavFrame || !NavToggle) {
         return false;
     }
  
     // if shown now
     if (NavToggle.firstChild.data == NavigationBarHide) {
         for (
                 var NavChild = NavFrame.firstChild;
                 NavChild != null;
                 NavChild = NavChild.nextSibling
             ) {
             if ( hasClass( NavChild, 'NavPic' ) ) {
                 NavChild.style.display = 'none';
             }
             if ( hasClass( NavChild, 'NavContent') ) {
                 NavChild.style.display = 'none';
             }
         }
     NavToggle.firstChild.data = NavigationBarShow;
  
     // if hidden now
     } else if (NavToggle.firstChild.data == NavigationBarShow) {
         for (
                 var NavChild = NavFrame.firstChild;
                 NavChild != null;
                 NavChild = NavChild.nextSibling
             ) {
             if (hasClass(NavChild, 'NavPic')) {
                 NavChild.style.display = 'block';
             }
             if (hasClass(NavChild, 'NavContent')) {
                 NavChild.style.display = 'block';
             }
         }
     NavToggle.firstChild.data = NavigationBarHide;
     }
  }
  
  // adds show/hide-button to navigation bars
  function createNavigationBarToggleButton()
  {
     var indexNavigationBar = 0;
     // iterate over all < div >-elements 
     var divs = document.getElementsByTagName("div");
     for(
             var i=0; 
             NavFrame = divs[i]; 
             i++
         ) {
         // if found a navigation bar
         if (hasClass(NavFrame, "NavFrame")) {
  
             indexNavigationBar++;
             var NavToggle = document.createElement("a");
             NavToggle.className = 'NavToggle';
             NavToggle.setAttribute('id', 'NavToggle' + indexNavigationBar);
             NavToggle.setAttribute('href', 'javascript:toggleNavigationBar(' + indexNavigationBar + ');');
             
             var NavToggleText = document.createTextNode(NavigationBarHide);
             NavToggle.appendChild(NavToggleText);
             // Find the NavHead and attach the toggle link (Must be this complicated because Moz's firstChild handling is borked)
             for(
               var j=0; 
               j < NavFrame.childNodes.length; 
               j++
             ) {
               if (hasClass(NavFrame.childNodes[j], "NavHead")) {
                 NavFrame.childNodes[j].appendChild(NavToggle);
               }
             }
             NavFrame.setAttribute('id', 'NavFrame' + indexNavigationBar);
         }
     }
     // if more Navigation Bars found than Default: hide all
     if (NavigationBarShowDefault < indexNavigationBar) {
         for(
                 var i=1; 
                 i<=indexNavigationBar; 
                 i++
         ) {
             toggleNavigationBar(i);
         }
     }
   
  }
  
  addOnloadHook( createNavigationBarToggleButton );

//</source>

/* <pre> */

/////////////////////////////////////////////////////////////////
// 記事名チェッカ 1.0 written by Tietew and Hatukanezumi
/////////////////////////////////////////////////////////////////

/*
 * 無効化のフラグ変数。無効化は、利用者のユーザスクリプトで真に設定することでする。
 */
var disableTitleChecker = false;

/*
 * 記事名チェッカによる処理を適用しない記事名のリスト (除外リスト)。
 */
var TitleChecker_exclude = [
  // [名前空間番号, 項目名], ...
];

/*
 * 記事名を検査し、結果を返す。
 * 引数:
 *   ns:    名前空間番号 (標準: 0; ノート: 1; ...)。
 *   title: 項目名。
 *   body:  項目本文の内容。
 * 返値:
 *   [処理, [[説明文, [ガイドライン等, ...]], ...], リダイレクトの即時削除対象になりうるかどうか]
 *   ただし、処理が「許可」であるときは false。
 */ 
function TitleChecker_check(ns, title, body) {
  var platform; // プラットフォームを識別する名称。
  var is_redirect; // リダイレクトであるかどうか。
  var action = 0; // 処理。0: 許可する; 1: 警告する; 2: 拒否する.
  var reason = [];
  var for_redirect = false;

  var do_check = function (pattern, newaction, message, guides) {
    var re, m, matched, msgstr;
    re = new RegExp(pattern, "g");
    m = title.match(re);
    if (m && (matched = m.join(" "))) {
      if (newaction > action) action = newaction;

      msgstr = message;
      msgstr = msgstr.replace("%s", matched);
      msgstr = msgstr.replace("%%", "%");
      reason.push([msgstr, guides]);

      if (guides && is_redirect)
        for ( var i = 0; i < guides.length; i++)
          if (guides[i] == "Wikipedia:即時削除の方針#リダイレクト") {
            for_redirect = true;
            break;
          }
    }
  };

  title = title.replace(/_/g, ' ');

  // 記事ごとの無効化。除外リストにあれば検査をしない。
  if (TitleChecker_exclude)
    for ( var i = 0;  i < TitleChecker_exclude.length; i++)
      if (TitleChecker_exclude[i][0] == ns && TitleChecker_exclude[i][1] == title)
        return false;

  // プラットフォームの判別。
  // check for AppleWebKit/416 (Safari/2.0.2) or later
  var safari = navigator.userAgent.match(/\bAppleWebKit\/(\d+)/);
  if(safari && safari[1] < 416) platform = 'Safari/1.x';

  // リダイレクトであるかどうかの判定。
  is_redirect = (body && body.match(/^#redirect[[\t\r\n ]/i));
  
  /*
   * 書式の検査
   */

  // 記事名の全体を「」または『』などでくくっているもの、ないしは、その後に曖昧さ回避の括弧があるもの。
  if (platform != 'Safari/1.x') do_check(
    "^[「『].*[」』]([ _]+[(][^)]+[)])?$",
    1, "記事名が鈎括弧でくくられています。芸術作品のタイトルは鈎括弧でくくるべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:記事名の付け方#小説・詩・映画・舞台・音楽・絵画など芸術作品のタイトル"]);

  // 記事名の末尾の括弧書きに半角の小括弧（丸括弧）を使用する場合に、左括弧の前に半角スペースがないもの。
  // 注: 入れ子は2重まで。
  do_check(
    "[^ ][(]([(][^()]*[)]|[^()])*[)]$",
    1, "記事名の最後の左括弧の前に半角スペースがありません: %s。曖昧さ回避の括弧である場合は、括弧の前に半角スペースを入れてください。名称自体に括弧を含んでいる場合はこの限りではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:曖昧さ回避#曖昧さ回避の種類と方法"]);

  // 記事名に半角の小括弧（丸括弧）を使用する場合に、括弧の左右が対称でないもの。
  // 注: 入れ子は2重まで。
  if (platform != 'Safari/1.x') do_check(
    "[(]([(][^()（）]*[)]|[（][^()（）]*[）]|[^()（）])*[）]|[（]([(][^()（）]*[)]|[（][^()（）]*[）]|[^()（）])*[)]",
    1, "括弧の左右が対称ではありません: %s。両方を、半角括弧か全角括弧に統一してください。",
    ["Wikipedia:即時削除の方針#リダイレクト"]);

  // 記事名に実体参照または数値文字参照を含んでいるもの。
  do_check(
    "([&][#]?[\dA-Za-z]+;)+",
    2, "記事名に実体参照を含んでいます: %s。実体参照を記事名に使うべきではありません。",
    ["Wikipedia:記事名の付け方#特殊記号の使用は慎重にすること"]);

  /*
   * 使用文字種の検査
   */

  // 技術的な考慮 (拒否)

  if (platform != 'Safari/1.x') do_check(
    "[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]",
    2, "文字でないものを含んでいます。文字でないものを記事名に使うべきではありません。");

  if (platform != 'Safari/1.x') do_check(
    "[\u0080-\u009F\uFFF0-\uFFFD\uDB40-\uDB7F]",
    2, "制御文字を含んでいます。制御文字を記事名に使うべきではありません。");

  if (platform != 'Safari/1.x') do_check(
    "[\u00A0]",
    2, "ノーブレークスペースを含んでいます。通常のスペースを使ってください。");

  if (platform != 'Safari/1.x') do_check("[\u00AD]",
    2, "ソフトハイフンを含んでいます。ソフトハイフンを記事名に使うべきではありません。");

  if (platform != 'Safari/1.x') do_check(
    "[\u2000-\u200A\u200B\u205F]",
    2, "特別な幅のスペースを含んでいます。通常のスペースを使ってください。");

  if (platform != 'Safari/1.x') do_check(
    "[\u200C\u200D\u2060]",
    2, "書式制御文字を含んでいます。一部の言語ではこの文字を使いますが、記事名には日本語を使ってください。",
    ["Wikipedia:記事名の付け方#日本語を使うこと"]);

  if (platform != 'Safari/1.x') do_check(
    "[\u2011]",
    2, "ノンプレーキングハイフンを含んでいます。ハイフンマイナス (-) を使ってください。");

  if (platform != 'Safari/1.x') do_check(
    "[\u2028-\u202E\u2061-\u206F]",
    2, "書式制御文字を含んでいます。書式制御文字を記事名に使うべきではありません。");

  if (platform != 'Safari/1.x') do_check(
    "[\u202F]",
    2, "特別な幅のノーブレークスペースを含んでいます。通常のスペースを使ってください。");

  if (platform != 'Safari/1.x') do_check(
    "[\uE000-\uF8FF\uDB80-\uDBFF]",
    2, "私用文字を含んでいます。私用文字 (外字) を記事名に使うべきではありません。");

  if (platform != 'Safari/1.x') do_check(
    "[\uFEFF]",
    2, "不可視な文字を含んでいます。この文字を記事名に使うべきではありません。");

  // その他のガイドライン等 (警告)

  if (platform != 'Safari/1.x') do_check(
    "[\u2160-\u217F]+",
    1, "ローマ数字を含んでいます: %s。これは機種依存文字です。ローマ数字は半角英字 (iやVなど) を並べて表記してください。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:表記ガイド#ローマ数字"]);

  if (platform != 'Safari/1.x') do_check(
    "[\u2460-\u2473\u24EA-\u24FF\u3251-\u325F\u32B1-\u32BF]+",
    1, "丸数字を含んでいます: %s。これは機種依存文字です。代わりに (1), (2), (3) を使用してください。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:表記ガイド#丸数字"]);

  if (platform != 'Safari/1.x') do_check(
    "[\u2474-\u24B5\u3200-\u3250\u32C0-\u32CF\u3300-\u33FF]+",
    1, "組文字を含んでいます: %s。片仮名や、漢字、英数字で表記してください。これは機種依存文字である場合もあります。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:表記ガイド#略記号", "Wikipedia:表記ガイド#文字コード"]);

  if (platform != 'Safari/1.x') do_check(
    "[\u3000]",
    1, "全角空白を含んでいます。全角空白を記事名に使うべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:記事名の付け方#全角と半角の使い分け"]);

  if (platform != 'Safari/1.x') do_check(
    "[\uFB00-\uFEFE\uFFE0-\uFFE7\uFFE8-\uFFEF]+",
    1, "機種依存文字を含んでいます: %s。機種依存文字を記事名に使うべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:表記ガイド#文字コード"]);

  if (platform != 'Safari/1.x') do_check(
    "[\uFF10-\uFF19]+",
    1, "全角数字を含んでいます: %s。全角英数字を記事名に使うべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:記事名の付け方#全角と半角の使い分け"]);

  if (platform != 'Safari/1.x') do_check(
    "[\uFF21-\uFF3A\uFF41-\uFF5A]+",
    1, "全角英字を含んでいます: %s。全角英数字を記事名に使うべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:記事名の付け方#全角と半角の使い分け"]);

  if (platform != 'Safari/1.x') do_check(
    "[\uFF00\uFF02\uFF04-\uFF07\uFF0A-\uFF0F\uFF1B\uFF20\uFF3C\uFF3E-\uFF40\uFF5F-\uFF60]+",
    1, "全角英記号を含んでいます: %s。全角英記号を記事名に使うべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:記事名の付け方#全角と半角の使い分け"]);

  if (platform != 'Safari/1.x') if (!is_redirect) do_check( // リダイレクトでない場合のみ
    "[\uFF5E]+",
    1, "全角チルダを含んでいます。この文字は、一部の環境で正しく表示されません。波ダッシュ (〜) か、できればハイフンマイナス (-) を使ってください。波ダッシュを使った記事名へのリダイレクトを作成しようとしている場合は、この限りではありません。",
    ["Wikipedia:表記ガイド#波ダッシュ"]);

  if (platform != 'Safari/1.x') do_check(
    "[\uFF61-\uFF9F]+",
    1, "半角片仮名を含んでいます: %s。半角片仮名を記事名に使うべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:記事名の付け方#全角と半角の使い分け"]);

  if (platform != 'Safari/1.x') do_check(
    "[\uFFA0-\uFFDF]+",
    1, "半角ハングル字母を含んでいます: %s。半角ハングル字母を記事名に使うべきではありません。",
    ["Wikipedia:即時削除の方針#リダイレクト", "Wikipedia:記事名の付け方#全角と半角の使い分け"]);
  
  if (action == 0) return false;
  return [action, reason, for_redirect];
}

/*
 * 記事名を検査した結果を表示する。
 * 引数:
 *   mark:   説明文などを挿入する場所のelement。
 *   action: 処理。
 *   reason: [[説明文, [ガイドライン等, ...]], ...]
 *   for_redirect: リダイレクトの即時削除対象でありうるかどうか。
 * 返値:
 *   なし。
 */
function TitleChecker_warn (mark, action, reason, for_redirect) {  
  var esc = function(str) {
    var e = document.createElement('div');
    e.appendChild(document.createTextNode(str));
    return e.innerHTML;
  };
  var wl = function(title) {
    title = title.replace(/_/g, ' ');
    return '<a href="/wiki/' +
      encodeURIComponent(title.replace(/ /g, '_')).replace(/%2F/g, '/').replace(/%3A/g, ':') +
      '" title="' + esc(title) + '">' +
      esc(arguments[1] || title) + '</a>';
  };

  var text = '';
  text = text +
    '<p><strong>警告: このページの記事名の付け方は、' +
    '当ウィキペディアのガイドラインなどにそっていないかもしれません。' +
    '理由は以下のとおりです。</strong></p>';
  if (reason) {
    text = text + '<ul>';
    for ( var i = 0; i < reason.length; i++) {
      text = text + '<li>' + esc(reason[i][0]);
      if (reason[i][1]) {
        var rl = [];
        for ( var j = 0; j < reason[i][1].length; j++) {
          rl.push(wl(reason[i][1][j]));
        }
        text = text + '詳しくは、' + rl.join('、') + 'を参照してください。';
      }
      text = text + '</li>';
    }
    text = text + '</ul>';
  }
  text = text +
    '<p>ガイドラインにそっていないときは、記事名の変更を検討してみてください。' +
    'なお、記事名を変更したときは、' +
    wl('特別:Whatlinkshere/' + wgPageName, 'このページのリンク元') +
    'を調べて、新しい記事へのリンクに変更するようにしてください。</p>' +
    '<p>記事名チェック機能の詳細は、' +
    wl('Help:記事名のチェック') +
    'をご覧ください。</p>';
  if (for_redirect && wgArticleId)
    text = text +
      '<p>編集中のページは' + wl('Wikipedia:リダイレクト', 'リダイレクト') + 'ですが、' +
      '即時削除に出せるかもしれません。' +
      'リダイレクトの即時削除に出すことができるのは、以下のすべてが該当する場合です。</p><ul>' +
      '<li>項目名の書き誤りで、それが誰が見ても明らかに誤りだとわかる。</li>' +
      '<li>項目が有益な履歴を持っていない。</li>' +
      '<li>項目がどこからもリンクされていない。</li>' +
      '</ul><p>リダイレクトの即時削除についての詳細は、' + wl('Wikipedia:即時削除の方針')+'を参照してください。</p>';

  var div = document.createElement('div');
  div.innerHTML = text;
  mark.parentNode.insertBefore(div, mark.nextSibling);

  return;
}

/*
 * 記事名チェッカの処理を実行する。
 * 引数:
 *   なし。
 * 返値:
 *   なし。
 */
function TitleChecker() {
  var dis = function() {
    for(var i = 0; i < arguments.length; ++i) {
      var e = document.getElementById(arguments[i]);
      if(e) e.disabled = true;
    }
  };

  // 利用者ごとの無効化。
  if (disableTitleChecker) return;

  // 検査は標準名前空間の記事に対してのみ行う。
  if (wgNamespaceNumber != 0) return;
  // 検査は利用者が新規作成または編集しようとしたときにのみ行う。
  var editform = document.getElementById('editform');
  if(!editform) return;
  
  // 検査して結果を得る。  
  var nc = TitleChecker_check(wgNamespaceNumber, wgTitle, document.getElementById('wpTextbox1').value);

  // 検査の結果、次のいずれかの処理を行う。
  // 許可: 「警告」や「拒否」に該当する処理をしない場合は、何もしない。
  if(!nc) return;
  // 拒否: 編集をできなくする。
  if (nc[0] > 1) {
    if(wgArticleId == 0) {
      editform.parentNode.removeChild(editform);
    } else {
      dis('wpSummary', 'wpMinoredit', 'wpWatchthis', 'wpSave', 'wpPreview', 'wpDiff');
      document.getElementById('wpTextbox1').readOnly = true;
    }
  }
  // 警告と拒否: 説明文を表示する。
  var mark;
  switch(skin) {
  case 'standard':
  case 'cologneblue':
  case 'nostalgia':
    mark = document.getElementById('specialpages') ?
           document.getElementById('topbar') :
           getElementsByClassName(document, 'h1', 'pagetitle')[0].nextSibling;
    break;
  default:
    mark = document.getElementById('jump-to-nav') ||
           document.getElementById('contentSub');
  }
  TitleChecker_warn(mark, nc[0], nc[1], nc[2]);

  return;
}

/*
 * 以上の処理は、ページ読み込みの際に実行する。
 */
addOnloadHook(TitleChecker);

/* </pre> */

/* MediaWiki:Monobook.js (deprecated; migrate to Common.js!) */
/* <pre> */
/* tooltips and access keys */
ta = new Object();
ta['pt-userpage'] = new Array('.','自分の利用者ページ');
ta['pt-anonuserpage'] = new Array('.','あなたのIPアドレス用の利用者ページ');
ta['pt-mytalk'] = new Array('n','自分の会話ページ');
ta['pt-anontalk'] = new Array('n','あなたのIPアドレスからなされた編集の会話ページ');
ta['pt-preferences'] = new Array('','オプションの変更');
ta['pt-watchlist'] = new Array('l','変更を監視しているページの一覧');
ta['pt-mycontris'] = new Array('y','自分の投稿記録');
ta['pt-login'] = new Array('o','ログインすることが推奨されますが、しなくても構いません。');
ta['pt-anonlogin'] = new Array('o','ログインすることが推奨されますが、しなくても構いません。');
ta['pt-logout'] = new Array('o','ログアウト');
ta['ca-talk'] = new Array('t','項目のノート');
ta['ca-edit'] = new Array('e','このページを編集できます。投稿の前に「プレビューを実行」ボタンを使ってください。');
ta['ca-addsection'] = new Array('+','このページにコメントを加える');
ta['ca-viewsource'] = new Array('e','このページは保護されています。ページのソースを閲覧できます。');
ta['ca-history'] = new Array('h','このページの過去の版');
ta['ca-protect'] = new Array('=','このページを保護');
ta['ca-delete'] = new Array('d','このページを削除');
ta['ca-undelete'] = new Array('d','削除されたページを復帰する');
ta['ca-move'] = new Array('m','このページを移動');
ta['ca-watch'] = new Array('w','このページをウォッチリストへ追加');
ta['ca-unwatch'] = new Array('w','このページをウォッチリストから外す');
ta['p-search'] = new Array('f','ウィキ内を検索');
ta['p-logo'] = new Array('','メインページ');
ta['n-mainpage'] = new Array('z','メインページに移動');
ta['n-portal'] = new Array('','このプロジェクトについて、あなたのできることを探す場所です'); 
ta['n-currentevents'] = new Array('','最近の出来事'); 
ta['n-recentchanges'] = new Array('r','最近更新が行われたページの一覧');
ta['n-randompage'] = new Array('x','ランダムに記事を選んで表示');
ta['n-help'] = new Array('','ヘルプ・使い方');
ta['n-villagepump'] = new Array('','プロジェクトについての意見交換や告知');
ta['n-contact'] = new Array('','ウィキペディアやウィキメディア財団に関する連絡先');
ta['n-sitesupport'] = new Array('','私たちをサポートしてください');
ta['t-whatlinkshere'] = new Array('j','このページにリンクしているページの一覧');
ta['t-recentchangeslinked'] = new Array('k','最近更新が行われたこのページのリンク先');
ta['feed-rss'] = new Array('','このページのRSSフィード');
ta['feed-atom'] = new Array('','このページのAtomフィード');
ta['t-contributions'] = new Array('','利用者の投稿記録');
ta['t-emailuser'] = new Array('','この利用者にメールを送信');
ta['t-upload'] = new Array('u','画像やメディアファイルをアップロード');
ta['t-specialpages'] = new Array('q','特別ページの一覧');
ta['ca-nstab-main'] = new Array('c','本文を表示');
ta['ca-nstab-user'] = new Array('c','利用者ページを表示');
ta['ca-nstab-media'] = new Array('c','メディアページを表示');
ta['ca-nstab-special'] = new Array('','これは特別ページです。編集することはできません。');
ta['ca-nstab-project'] = new Array('a','プロジェクトページを表示');
ta['ca-nstab-image'] = new Array('c','画像ページを表示');
ta['ca-nstab-mediawiki'] = new Array('c','インターフェースを表示');
ta['ca-nstab-template'] = new Array('c','テンプレートを表示');
ta['ca-nstab-help'] = new Array('c','ヘルプページを表示');
ta['ca-nstab-category'] = new Array('c','カテゴリページを表示');
ta['ca-nstab-portal'] = new Array('c','ポータルを表示');

function addLoadEvent(func) 
{
  if (window.addEventListener) 
    window.addEventListener("load", func, false);
  else if (window.attachEvent) 
    window.attachEvent("onload", func);
}

function LinkFA() 
{
   var a, b;
   // iterate over all <span>-elements
   for(var i=0; a = document.getElementsByTagName("span")[i]; i++) {
      // if found a AdQ span
      if(a.className == "FA") {
         // iterate over all <li>-elements
         for(var j=0; b = document.getElementsByTagName("li")[j]; j++) {
            // if found a FA link
            if(b.className == "interwiki-" + a.id) {
               b.style.padding = "0 0 0 16px";
               b.style.backgroundImage = "url('http://upload.wikimedia.org/wikipedia/ja/6/60/LinkFA-star.png')";
               b.style.backgroundRepeat = "no-repeat";
               b.title = "この記事は秀逸な記事に選ばれています";
            }
         }
      }
   }
}
addLoadEvent(LinkFA);

// Force IP to preview before saving changes.
// Copyright Marc Mongenet, 2006
function forcePreview()
{
        if (wgUserName != null) return;
        var saveButton = document.getElementById("wpSave");
        if (!saveButton) return;
        if (location.search.search(/&action=edit/) == -1) return;
        saveButton.disabled = true;
        saveButton.style.fontWeight = "normal";
        document.getElementById("wpPreview").style.fontWeight = "bold";
}

addLoadEvent(forcePreview);

/* </pre> */